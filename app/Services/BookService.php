<?php


namespace App\Services;


use App\Dtos\Result;
use App\Models\AccountActivated;
use App\Models\Book;
use App\Models\BookLog;
use App\Models\Cart;
use App\Models\CartService;
use App\Notifications\UpdateOrder;
use Exception;
use Illuminate\Database\Eloquent\Builder;

class BookService extends ModelService
{
    /**
     * storable field is a field which can be filled during creating the record
     */
    protected array $storables = ['total_price', 'total_discount', 'total_fee', 'user_id', 'status', 'payment_method', 'notes','service_time'];

    /**
     * updatable field is a field which can be filled during updating the record
     */
    protected array $updatables = [

        'status'];

    /**
     * searchable field is a field which can be searched for from keyword parameter in search method
     */
    protected array $searchables = [];
    /**
     *
     */

    protected array $with = ['details'];
    protected CartsService $cartsService;
    protected BookDetailsService $bookDetailsService;
    protected BookLogService $bookLogService;
    protected UserService $userService;

    public function __construct(CartsService $cartsService, UserService $userService, BookDetailsService $bookDetailsService, BookLogService $bookLogService)
    {
        $this->cartsService = $cartsService;
        $this->userService = $userService;
        $this->bookDetailsService = $bookDetailsService;
        $this->bookLogService = $bookLogService;
    }

    public function builder(): Builder
    {
        return Book::query();
    }

    /**
     * @throws Exception
     */
    public function create(array $attributes): Result
    {
        $attributes["user_id"] = auth()->id();
        $user = $this->userService->find(auth()->id());
        $cart = $user->carts()->first();
        if ($cart instanceof Cart) {
            $attributes["cart_id"] = $cart->id;
            $cart_details = $cart->cartService()->first();
            if ($cart_details instanceof CartService) {
                $attributes['total_price'] = $cart_details->total_price;
                $details['service_time'] = $cart_details->service_time;

            } else {
                throw new Exception('your cart is empty');
            }
        } else {
            throw new Exception('your cart is empty');

        }
        $attributes['status'] = "waiting";
        $record = $this->store($attributes); // TODO: Change the autogenerated stub
        if ($record instanceof Book) {

            $service = $cart_details->service()->select('title', 'title_ar')->first();
            if ($service) {
                $service = $service->toJson();
                $service = (string)$service;
            } else {
                $service = '';
            }
            $location = $cart_details->location()->select('country', 'city', 'street1', 'street2', 'title', 'parking_type', 'phone', 'longitude', 'latitude')->first();
            if ($location) {
                $location = $location->toJson();
                $location = (string)$location;
            } else {
                $location = '';
            }
            $vehicle = $cart_details->vehicle()->select('vehicle_type', 'type', 'make', 'model', 'license_plate', 'color')->first();
            if ($vehicle) {
                $vehicle = $vehicle->toJson();

                $vehicle = (string)$vehicle;
            } else {
                $vehicle = '';
            }
            $details['service_name'] = $service;
            $details['location'] = $location;
            $details['vehicle'] = $vehicle;
            $details['coupon'] = "";

            $record->details()->create($details);
            $cart->cartService()->delete();

        }
        return $this->ok($record, 'records:create:done');

    }

    /**
     * prepare
     */
    protected function prepare(string $operation, array $attributes): array
    {

        return parent::prepare($operation, $attributes);
    }

    public function save($id, array $attributes): Result
    {

        $user = auth()->user();
        if (isset($attributes["status"])) {
            $book = $this->find($id);
            $update = $book->logs()->first();
            if ($update instanceof BookLog) {
                $oldStatus=  $update->new_status;
            }
            else{
                $oldStatus=$book->status;
            }
            $editor = $this->userService->find($book->user_id);
        }
        if ($oldStatus == $attributes["status"]){
            return $this->ok($book,"no change");
        }
        if ($editor->id == $user->id) {
            $user->notify(new UpdateOrder);

        } else {
            $user->notify(new UpdateOrder);
            $editor->notify(new UpdateOrder);

        }
        $this->bookLogService->create(["user_id" => $user->id,"book_id" => $book->id, "notes" => $attributes["notes"] ?? "-", "reason" => $attributes["reason"] ?? "-", "old_status" => $oldStatus, "new_status" => $attributes["status"]]);;
        return parent::save($id, $attributes); // TODO: Change the autogenerated stub
    }
}
