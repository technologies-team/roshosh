<?php

namespace App\Services;

use App\Models\Category;
use App\Models\Service;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Validation\ValidationException;

class ServiceService extends ModelService
{
    /**
     * storable field is a field which can be filled during creating the record
     */
    protected array $storables = ['title','title_ar', 'description','description_ar', 'price', 'category_id', 'rewards','photo_id'];

    /**
     * updatable field is a field which can be filled during updating the record
     */
    protected array $updatables = ['title', 'description','title_ar', 'description_ar', 'price', 'category_id', 'rewards','avatar_id'];

    /**
     * searchable field is a field which can be search for from keyword parameter in search method
     */
    protected array $searchables = ['title','description','title_ar','description_ar'];

    /**
     *
     */
    protected array $with = ['category','avatar'];


    private $categories;

    public function __construct(CategoryService $categories)
    {
        $this->categories = $categories;
    }

    public function builder(): \Illuminate\Database\Eloquent\Builder
    {
        return Service::query();
    }

    /**
     * prepare
     */
    protected function prepare(string $operation, array $attributes): array
    {
        if (isset($attributes['category_id']) && isset($attributes['sub_category_id'])) {
            $category = $this->categories->find($attributes['category_id']);
            if ($category instanceof Category) {
              throw ValidationException::withMessages(['sub_category_id' => 'clinicsservices:sub_category_id:invalid']);

            }
        }
        return parent::prepare($operation, $attributes);
    }

    public function rewards(array $services)
    {
        $services = $this->builder()->whereIn('id', $services)->get();
        $rewards = 0;
        foreach ($services as $i => $service) {
            if (!$service->rewards) {
                throw ValidationException::withMessages(['services.' . $i => 'clinicsservices:rewards:not_configured']);
            }
            $rewards = $rewards + $service->rewards;
        }
        return $rewards;
    }
    public function store(array $attributes):Service
    {
        return parent::store($attributes); // TODO: Change the autogenerated stub
    }
}
